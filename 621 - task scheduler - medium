class Solution {
    public int leastInterval(char[] tasks, int n) {
        PriorityQueue<Integer> pq  = new PriorityQueue<>((a,b) -> b-a);
        Queue<Pair<Integer,Integer>> q = new LinkedList();
        int[] arr = new int[26];
        for(char task: tasks){
            arr[task-'A']++;
        }
        for(int a:arr){
            if(a>0){
                pq.offer(a);
            }
        }
        int time=0;
        while(!pq.isEmpty() || !q.isEmpty()){
            time++;
            if(!pq.isEmpty()){
                int a = pq.poll();
                a--;
                if(a>0){
                    q.add(new Pair(a,time+n));
                }
            }

            if(!q.isEmpty()){
                if(q.peek().getValue() == time){
                    pq.offer(q.poll().getKey());
                }
            }
        }
        return time;
    }
}
