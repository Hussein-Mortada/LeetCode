class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        int[] parent = new int[n + 1]; //n+1 to use 1 indexing
        Arrays.fill(parent, -1);

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];

            int uParent = find(parent, u);
            int vParent = find(parent, v);

            if (uParent == vParent) {
                return edge;
            }

            // Union the two sets by making one of them the parent of the other
            parent[uParent] = vParent;
        }

        // If no redundant connection is found, return an empty array (this should not happen in a valid input)
        return new int[]{};
    }

    private int find(int[] parent, int node) {
        if (parent[node] == -1) {
            return node;
        }
        return find(parent, parent[node]);
}
}
