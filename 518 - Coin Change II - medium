class Solution { //memoization
    public int change(int amount, int[] coins) {
        Integer[][] dp = new Integer[amount+1][coins.length];
        return dfs(dp,amount,coins,0);
    }
    int dfs(Integer[][] dp, int amount, int[] coins, int index){
        if(index>=coins.length){
            return 0;
        }
        if(amount==0){
            return 1;
        }else if(amount<0){
            return 0;
        }
        if(dp[amount][index]!=null){
            return dp[amount][index];
        }
        dp[amount][index] = dfs(dp,amount-coins[index],coins,index)+
                            dfs(dp,amount,coins,index+1);
        return dp[amount][index];


    }
}

class Solution { // bottom up tabulation
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount + 1];
        dp[0] = 1;

        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] += dp[i - coin];
            }
        }

        return dp[amount];
    }
}
