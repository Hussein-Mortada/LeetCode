class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> graph = new ArrayList<>();
        //makes an empty list for each course ex: 0,1 -> 0: , 1: 
        for(int i = 0; i<numCourses;i++){
            graph.add(new ArrayList<>());
        }
        // for each item in prerequisites, adds it to the list
        //made earlier ex: [1,0][0,1] -> 0:1 , 1:0
        for(int[] prereq: prerequisites){
            graph.get(prereq[0]).add(prereq[1]);
        }
        //list of visited nodes: 0=not visited 1: currently visiting, 2:visited
        int[] visited = new int[numCourses];
        boolean hasCycle = false;
        for(int i=0;i<numCourses;i++){
            if(visited[i]==0){
                hasCycle = hasCycle(graph,visited,i);
                if(hasCycle) return false;
            }
        }
        return true;

    }

    boolean hasCycle(List<List<Integer>> graph,int[] visited,int course){
        visited[course]=1;//now visiting it
        for(int prereq: graph.get(course)){
            if(visited[prereq] == 1) return true; //if the prereq is visiting already, cycle found
            //if prereq hasnt been visited yet, check if it also has a cycle
            if(visited[prereq] ==0 && hasCycle(graph,visited,prereq)) return true; 
        }
        visited[course]=2;
        return false;
    }
}
