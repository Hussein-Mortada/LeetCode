// java 
//solution 1 binary search approach
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] ans = new int[2];

        for(int i=1;i<=numbers.length;i++){
            int low = i+1;
            int high = numbers.length;
            while(low<=high){
                int med = (low+high)/2;
                if(numbers[i-1]+numbers[med-1]==target){
                    ans[0] = i;
                    ans[1]=med;
                    return ans;
                }
                else if(numbers[i-1]+numbers[med-1]>target){
                    high = med-1;
                }
                else{
                    low=med+1;
                }
            }
        }
        return ans;
    }
}
//solution 2 two pointers:
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length-1;
        int[] ans = new int[2];
        while(left<right){
            if(numbers[left]+numbers[right]==target){
                ans[0]=left+1;
                ans[1] = right+1;
                break;
            }
            if(numbers[left]+numbers[right]>target)
                right--;
            if(numbers[left]+numbers[right]<target){
                left++;
            }
        }
        return ans;
    }
}


 
