// stack inorder
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root==null) return -1;
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode curr = root;
        while(curr!=null || !stack.isEmpty()){
            //push leftmost
            while(curr!=null){
                stack.push(curr);
                curr=curr.left;
            }
            curr=stack.pop();
            list.add(curr.val);
            curr=curr.right;
        }
        return list.get(k-1);
}

//recursive inorder
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root==null) return -1;
        List<Integer> list = new ArrayList<>();
        helper(root,list);
        return list.get(k-1);

    }
    void helper(TreeNode root,List<Integer> list){
        if(root==null) return;
        helper(root.left, list);
        list.add(root.val);
        helper(root.right,list);
    }
}
